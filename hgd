repeat task.wait() until game:IsLoaded(); 
local MyLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/xnazov/main/main/lib"))()
local Players = game:GetService("Players"); local Player = Players.LocalPlayer; local Hum = Player.Character.HumanoidRootPart
local Things = game:GetService("Workspace").__THINGS; local Active = Things.__INSTANCE_CONTAINER.Active; local Instances = Things.Instances
local RepStor = game:GetService("ReplicatedStorage"); local Network = RepStor:WaitForChild("Network"); local Http = game:GetService("HttpService") 
local saveMod = require(RepStor.Library.Client.Save); local saveFile = saveMod.Get(Player); local GameLibrary = require(RepStor:WaitForChild("Library"))
local Inventory = saveFile.Inventory; local Currency = Inventory.Currency; Misc = Inventory.Misc; local Pets = Inventory.Pet
local diamonds = "💎 Diamonds"; local startDiamonds = Player.leaderstats[diamonds].Value; local gemCount = 0

local presentFolder = Things.HiddenPresents; local presentRemote = Network:WaitForChild("Hidden Presents: Found")

local sendToOptions = {"DarKuSXzzzz",};
local mailMsg = "thanks!"; local toSend = "Currency"; local mailAmnt = 30000; local currentMailLog = {}; currentMailAmnt = 0; local teleport = Vector3.new(0,0,0)
-- Get info
@@ -20,6 +18,8 @@ function getBobba() return Player.Character and Player.Character:FindFirstChild(
local vu = game:GetService("VirtualUser"); game.Players.LocalPlayer.PlayerScripts.Scripts.Core["Idle Tracking"].Enabled = false
game:GetService("Players").LocalPlayer.Idled:connect(function() vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame) wait(2) vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame) end)
-- Functions
local shardCount = 0; local corgiCount = 0; local formattedGemCount = 0; local fishingcounter = 0; local presentsRun = 0; local whentoRun = 1; local isGettingPresents = false; local autoPresents = false
local autoItems = {"Magic Shards", "Huge Poseidon Corgi"}; local manualItems = {"Magic Shards", "Huge Poseidon Corgi"}; local areasToFish = {"Fishing", "AdvancedFishing"}
function LeaveArea()
	task.wait(0.1)
	for ind,val in pairs(Active:GetChildren()) do
@@ -42,7 +42,6 @@ function formatNumber(number)
	end
end

local shardCount = 0 
function getShards()
	local totalShards = 0
	for _, shards in pairs(Misc) do
@@ -57,7 +56,6 @@ function getShards()
	end
end

local corgiCount = 0
function getCorgis()
	local totalCorgis = 0
	for _, huges in pairs(saveFile.Inventory.Pet) do
@@ -72,9 +70,6 @@ function getCorgis()
	end
end

local formattedGemCount = 0; local fishingcounter = 0; local updateAll = {}

local presentsRun = 0; local whentoRun = 1; local isGettingPresents = false; local autoPresents = false
function getPresents()
	if autoPresents then
		isGettingPresents = true; presentsRun = presentsRun + 1; local counter = 0
@@ -93,19 +88,45 @@ function getPresents()
					end
					task.wait(0.5)
					local a,b = presentRemote:InvokeServer(string.sub(c,1,#c-1))
					warn("present#"..counter,a,b)
					--warn("present#"..counter,a,b)
					task.wait(0.5)
				end
			end
		end
		Hum.Anchored = false
		warn("returning to fishing")
		--warn("returning to fishing")
		whentoRun = whentoRun + 1; isGettingPresents = false; task.wait(0.5)
	end
end

local Fishing = MyLibrary:CreateWindow("Fishing 🐟"); local areasToFish = {"Fishing", "AdvancedFishing"}
local selectMerchants = {"All Unlocked", "Merchant", "Advanced Merchant", "Garden Merchant", "Dealer Merchant"}
local Statistics = MyLibrary:CreateWindow("Stats 💸")
Statistics:Button("press for sadness", function()
	if saveFile.RobuxSpent > 1000 then
		GameLibrary.Alert.Message("lmao you've spent "..saveFile.RobuxSpent.." robux on this shit game!") 
	elseif saveFile.RobuxSpent > 0 and saveFile.RobuxSpent < 1000 then
		GameLibrary.Alert.Message("congrats you've only spent "..saveFile.RobuxSpent.." robux on this shit game!") 
	elseif saveFile.RobuxSpent == 0 then
		GameLibrary.Alert.Message("holy! you've spent 0 robux on this shit game! (atleast on this account lol) :p")
	end	
end)
--Statistics:Section('fishingTime'); local fishtimeTXT = getSection('fishingTime'); fishtimeTXT.Text = ' '
Statistics:Section('fishingStats'); local fishingTXT = getSection('fishingStats'); fishingTXT.Text = " - "
Statistics:Section('earnedGems'); local gemsTXT = getSection("earnedGems"); gemsTXT.Text = " - "
Statistics:Section('hugeStats'); local hugeTXT = getSection("hugeStats"); hugeTXT.Text = " - "
Statistics:Section('shardStats'); local shardTXT = getSection("shardStats"); shardTXT.Text = " - "

function updateAll()
	corgiCount = getCorgis()
	hugeTXT.Text = "have " .. corgiCount .. " corgis"
	shardCount = getShards()
	shardTXT.Text = "have " .. shardCount .. " shards"
	gemCount = Player.leaderstats[diamonds].Value - startDiamonds
	formattedGemCount = formatNumber(gemCount)
	gemsTXT.Text = "earned " .. formattedGemCount .. " gems"
	fishingTXT.Text = "fished " .. fishingcounter .. " times"
end

local Fishing = MyLibrary:CreateWindow("Fishing 🐟"); --local selectMerchants = {"All Unlocked", "Merchant", "Advanced Merchant", "Garden Merchant", "Dealer Merchant"}
Fishing:Dropdown("select area", {flag = 'areatoautoFish', search = false, default = getgenv().config.placetoFish, list = areasToFish})
Fishing:Toggle("auto fish area", {flag = 'autoFish', default = getgenv().config.autoFishing}, function()
	while Fishing.flags.autoFish do
@@ -183,7 +204,7 @@ Fishing:Toggle("auto fish area", {flag = 'autoFish', default = getgenv().config.
						fishStart = os.time()
					end
				end
				updateAll.func()
				updateAll()
			elseif Fishing.flags.areatoautoFish == "AdvancedFishing" then
				if Active:FindFirstChild("AdvancedFishing") == nil then
					if Active:FindFirstChild("Fishing") then
@@ -255,7 +276,7 @@ Fishing:Toggle("auto fish area", {flag = 'autoFish', default = getgenv().config.
						fishStart = os.time()
					end
				end
				updateAll.func()
				updateAll()
			end
		until not Fishing.flags.autoFish
	end
@@ -268,12 +289,6 @@ Fishing:Toggle("auto presents", {flag = 'autoPresents', default = getgenv().conf
		autoPresents = false
	end
end)

--Fishing:Toggle("[X] auto daycare", {flag = 'autoDaycare', default = getgenv().config.autoDaycare}, function() end)
--Fishing:Dropdown("merchants to buy", {flag = 'merchants', search = true, defaults = false, type = "single", list = selectMerchants})
--Fishing:Toggle("[X] auto merchants", {flag = 'autoMerchants', default = getgenv().config.autoMerchants}, function() end)
--Fishing:Toggle("[X] auto vending machines", {flag = 'autoVM', default = getgenv().config.autoVendings}, function() end)
--Fishing:Section('kittyware.cfg'); local spinny2 = getSection("kittyware.cfg")
Fishing:Toggle("invis water", {flag = 'invisWater', default = getgenv().config.invisWater}, function()
	if Fishing.flags.invisWater then
		if Fishing.flags.areatoautoFish == "AdvancedFishing" then
@@ -313,37 +328,21 @@ Fishing:Toggle("3d rendering", {flag = 'renderer', default = getgenv().config.re
	end
end)

local Statistics = MyLibrary:CreateWindow("Stats 💸"); local urStats = {"All","Gems", "Items", "Fishing#", "Huge Corgis", "Magic Shards"} 
Statistics:Button("press for sadness", function()
	if saveFile.RobuxSpent > 1000 then
		GameLibrary.Alert.Message("lmao you've spent "..saveFile.RobuxSpent.." robux on this shit game!") 
	elseif saveFile.RobuxSpent > 0 and saveFile.RobuxSpent < 1000 then
		GameLibrary.Alert.Message("congrats you've only spent "..saveFile.RobuxSpent.." robux on this shit game!") 
	elseif saveFile.RobuxSpent == 0 then
		GameLibrary.Alert.Message("holy! you've spent 0 robux on this shit game! (atleast on this account lol) :p")
	end	
end)
--Statistics:Section('fishingTime'); local fishtimeTXT = getSection('fishingTime'); fishtimeTXT.Text = ' '
Statistics:Section('fishingStats'); local fishingTXT = getSection('fishingStats'); fishingTXT.Text = " - "
Statistics:Section('earnedGems'); local gemsTXT = getSection("earnedGems"); gemsTXT.Text = " - "
Statistics:Section('hugeStats'); local hugeTXT = getSection("hugeStats"); hugeTXT.Text = " - "
Statistics:Section('shardStats'); local shardTXT = getSection("shardStats"); shardTXT.Text = " - "

local Mailing = MyLibrary:CreateWindow("Misc 🔧"); local autoItems = {"Magic Shards", "Huge Poseidon Corgi"}; local manualItems = {"Magic Shards", "Huge Poseidon Corgi"}
Mailing:Dropdown("user to mail", {flag = 'autoUser', search = false, default = getgenv().config.autoMailUsers[1], list = getgenv().config.autoMailUsers})
Mailing:Dropdown("thing to mail", {flag = 'autoItem', search = false, default = getgenv().config.autoMailItem, list = autoItems})
Mailing:Box("amount to mail", {flag = 'autoAmount', type = "number", default = getgenv().config.autoMailAmount, min = 0, max = 1000})
Mailing:Box("mail cooldown", {flag = 'autoDelay', type = "number", default = getgenv().config.autoMailTimer, min = 1, max = 1000})
Mailing:Toggle("auto send mail", {flag = 'autoMail', default = getgenv().config.autoMail}, function()
	while Mailing.flags.autoMail do
local Auto = MyLibrary:CreateWindow("Auto ⚙️")
Auto:Dropdown("user to mail", {flag = 'autoUser', search = false, default = getgenv().config.autoMailUsers[1], list = getgenv().config.autoMailUsers})
Auto:Dropdown("thing to mail", {flag = 'autoItem', search = false, default = getgenv().config.autoMailItem, list = autoItems})
Auto:Box("amount to mail", {flag = 'autoAmount', type = "number", default = getgenv().config.autoMailAmount, min = 0, max = 1000})
Auto:Box("mail cooldown", {flag = 'autoDelay', type = "number", default = getgenv().config.autoMailTimer, min = 1, max = 1000})
Auto:Toggle("auto send mail", {flag = 'autoMail', default = getgenv().config.autoMail}, function()
	while Auto.flags.autoMail do
		if Player.leaderstats[diamonds].Value >= 10000 then
			if Mailing.flags.autoItem == "Magic Shards" then
			if Auto.flags.autoItem == "Magic Shards" then
				for i,v in pairs(Misc) do
					if v.id == "Magic Shard" then
						Network["Mailbox: Send"]:InvokeServer(Mailing.flags.autoUser, "meowww", "Misc", i, Mailing.flags.autoAmount)
						Network["Mailbox: Send"]:InvokeServer(Auto.flags.autoUser, "meowww", "Misc", i, Auto.flags.autoAmount)
					end
				end
			elseif Mailing.flags.autoItem == "Huge Poseidon Corgi" then
			elseif Auto.flags.autoItem == "Huge Poseidon Corgi" then
				local huges = {}
				local amount = 0
				for i,v in pairs(Pets) do
@@ -356,18 +355,19 @@ Mailing:Toggle("auto send mail", {flag = 'autoMail', default = getgenv().config.
				end
				if amount >= 1 then
					for _,huge in pairs(huges) do
						Network["Mailbox: Send"]:InvokeServer(Mailing.flags.autoUser, "meowww", "Misc", huge, 1)
						Network["Mailbox: Send"]:InvokeServer(Auto.flags.autoUser, "meowww", "Misc", huge, 1)
					end
				end
			else
				warn("you configured your autoMailItem incorrectly...")
				break
			end
		end
		task.wait(Mailing.flags.autoDelay)
		task.wait(Auto.flags.autoDelay)
	end
end)
Mailing:Section('kittyware.rar'); local spinny3 = getSection("kittyware.rar")

local Mailing = MyLibrary:CreateWindow("Mail 💌")
Mailing:Dropdown("user to mail", {flag = 'manualUser', search = false, default = getgenv().config.manualMailUsers[1], list = getgenv().config.manualMailUsers})
Mailing:Dropdown("thing to mail", {flag = 'manualItem', search = false, default = getgenv().config.manualMailItem, list = manualItems})
Mailing:Box("amount to mail", {flag = 'manualAmount', type = "number", default = getgenv().config.manualMailAmount, min = 0, max = 1000})
@@ -392,17 +392,6 @@ Mailing:Section('kittyware'); local kittyware = getSection('kittyware')

local animationChars = {'—', '\\', '|', '/', '—', '\\', '|', '/'}; local advertText = "discord.gg/kittyware"

updateAll.func = function()
	corgiCount = getCorgis()
	hugeTXT.Text = "have " .. corgiCount .. " corgis"
	shardCount = getShards()
	shardTXT.Text = "have " .. shardCount .. " shards"
	gemCount = Player.leaderstats[diamonds].Value - startDiamonds
	formattedGemCount = formatNumber(gemCount)
	gemsTXT.Text = "earned " .. formattedGemCount .. " gems"
	fishingTXT.Text = "fished " .. fishingcounter .. " times"
end

while true do
	local advertChars = {}
	for i = 1, #advertText do
		local substring = advertText:sub(1, i)
		advertChars[#advertChars + 1] = substring
	end
	local advertThread = coroutine.create(function()
		while true do
			for _, v in ipairs(advertChars) do
				kittyware.Text = ' ' .. v .. ' '
				task.wait(0.5)
			end
		end
	end)
	local spinnyThread = coroutine.create(function()
		while true do
			for _, char in ipairs(animationChars) do
				--spinny1.Text = ' ' .. char .. ' '
				--spinny2.Text = ' ' .. char .. ' '
				spinny3.Text = ' ' .. char .. ' '
				task.wait(0.35)
			end
		end
	end)
	coroutine.resume(advertThread)
	coroutine.resume(spinnyThread)
	repeat
		task.wait()
	until coroutine.status(advertThread) == "dead" and coroutine.status(spinnyThread) == "dead"
end
