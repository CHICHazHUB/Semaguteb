local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/UI-Interface/CustomFIeld/main/RayField.lua'))()

local Window = Rayfield:CreateWindow({
    Name = "CHiChAzHUB",
    LoadingTitle = "CHiChAzHUB",
    LoadingSubtitle = "by ChicHAz",
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "CHiChAzHUB"
    },
    Discord = {
       Enabled = false,
       Invite = "sirius", -- The Discord invite code, do not include discord.gg/
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "CHiChAzHUB",
       Subtitle = "Key System",
       Note = "Join the discord (discord.gg/7FRdCNJjxW)",
       FileName = "SiriusKey",
       SaveKey = true,
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = "Madi"
    }
 })

 local Tab = Window:CreateTab("Plant Options", 4483362458) -- Title, Image

 local Section = Tab:CreateSection("Plant Options",true) -- The 2nd argument is to tell if its only a Title and doesnt contain elements

 local Button = Tab:CreateButton({
    Name = "Tp to Garden",
    Info = "", -- Speaks for itself, Remove if none.
    Interact = 'Changable',
    Callback = function()
        game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(176.87, 23.35, 1993.71)
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "WaterPlant",
    Info = "Toggle info/Description.", -- Speaks for itself, Remove if none.
    CurrentValue = false,
    Flag = "waterplantFlag", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(v)
        getgenv().waterPlant = v
            if v == true then
                while getgenv().waterPlant do
    local Remote = game.ReplicatedStorage.Network.Instancing_InvokeCustomFromClient
    local saveModule = require(game:GetService("ReplicatedStorage").Library.Client.Save)
    local result = saveModule.Get()
    local Remote = game.ReplicatedStorage.Network.Instancing_InvokeCustomFromClient
    local Lib = require(game.ReplicatedStorage:WaitForChild("Library").Client)
    local Lib_ = require(game.ReplicatedStorage:WaitForChild("Library"))
    local HttpService = game:GetService("HttpService")

 local Remote = game.ReplicatedStorage.Network.Instancing_InvokeCustomFromClient
 Remote:InvokeServer("FlowerGarden", "PlantSeed", 1, "Diamond")
 Remote:InvokeServer("FlowerGarden", "WaterSeed", 1)
 Remote:InvokeServer("FlowerGarden", "ClaimPlant", 1)
 Remote:InvokeServer("FlowerGarden", "PlantSeed", 2, "Diamond")
 Remote:InvokeServer("FlowerGarden", "WaterSeed", 2)
 Remote:InvokeServer("FlowerGarden", "ClaimPlant", 2)
 Remote:InvokeServer("FlowerGarden", "PlantSeed", 3, "Diamond")
 Remote:InvokeServer("FlowerGarden", "WaterSeed", 3)
 Remote:InvokeServer("FlowerGarden", "ClaimPlant", 3)
 Remote:InvokeServer("FlowerGarden", "PlantSeed", 4, "Diamond")
 Remote:InvokeServer("FlowerGarden", "WaterSeed", 4)
 Remote:InvokeServer("FlowerGarden", "ClaimPlant", 4)
 Remote:InvokeServer("FlowerGarden", "PlantSeed", 5, "Diamond")
 Remote:InvokeServer("FlowerGarden", "WaterSeed", 5)
 Remote:InvokeServer("FlowerGarden", "ClaimPlant", 5)
 Remote:InvokeServer("FlowerGarden", "PlantSeed", 6, "Diamond")
 Remote:InvokeServer("FlowerGarden", "WaterSeed", 6)
 Remote:InvokeServer("FlowerGarden", "ClaimPlant", 6)
 Remote:InvokeServer("FlowerGarden", "PlantSeed", 7, "Diamond")
 Remote:InvokeServer("FlowerGarden", "WaterSeed", 7)
 Remote:InvokeServer("FlowerGarden", "ClaimPlant", 7)
 Remote:InvokeServer("FlowerGarden", "PlantSeed", 8, "Diamond")
 Remote:InvokeServer("FlowerGarden", "WaterSeed", 8)
 Remote:InvokeServer("FlowerGarden", "ClaimPlant", 8)
 Remote:InvokeServer("FlowerGarden", "PlantSeed", 9, "Diamond")
 Remote:InvokeServer("FlowerGarden", "WaterSeed", 9)
 Remote:InvokeServer("FlowerGarden", "ClaimPlant", 9)
 Remote:InvokeServer("FlowerGarden", "PlantSeed", 10, "Diamond")
 Remote:InvokeServer("FlowerGarden", "WaterSeed", 10)
 Remote:InvokeServer("FlowerGarden", "ClaimPlant", 10)
                end
        end
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "InstaPlant",
    Info = "Toggle info/Description.", -- Speaks for itself, Remove if none.
    CurrentValue = false,
    Flag = "waterplantFlag", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(v)
        getgenv().instaPlant = v
            if v == true then
                while getgenv().instaPlant do
    local Remote = game.ReplicatedStorage.Network.Instancing_InvokeCustomFromClient
    local saveModule = require(game:GetService("ReplicatedStorage").Library.Client.Save)
    local result = saveModule.Get()
    local Remote = game.ReplicatedStorage.Network.Instancing_InvokeCustomFromClient
    local Lib = require(game.ReplicatedStorage:WaitForChild("Library").Client)
    local Lib_ = require(game.ReplicatedStorage:WaitForChild("Library"))
    local HttpService = game:GetService("HttpService")

 local Remote = game.ReplicatedStorage.Network.Instancing_InvokeCustomFromClient
 Remote:InvokeServer("FlowerGarden", "PlantSeed", 1, "Diamond")
                      Remote:InvokeServer("FlowerGarden", "InstaGrowSeed", 1)
                      Remote:InvokeServer("FlowerGarden", "ClaimPlant", 1)
                      Remote:InvokeServer("FlowerGarden", "PlantSeed", 2, "Diamond")
                      Remote:InvokeServer("FlowerGarden", "InstaGrowSeed", 2)
                      Remote:InvokeServer("FlowerGarden", "ClaimPlant", 2)
                      Remote:InvokeServer("FlowerGarden", "PlantSeed", 3, "Diamond")
                      Remote:InvokeServer("FlowerGarden", "InstaGrowSeed", 3)
                      Remote:InvokeServer("FlowerGarden", "ClaimPlant", 3)
                      Remote:InvokeServer("FlowerGarden", "PlantSeed", 4, "Diamond")
                      Remote:InvokeServer("FlowerGarden", "InstaGrowSeed", 4)
                      Remote:InvokeServer("FlowerGarden", "ClaimPlant", 4)
                      Remote:InvokeServer("FlowerGarden", "PlantSeed", 5, "Diamond")
                      Remote:InvokeServer("FlowerGarden", "InstaGrowSeed", 5)
                      Remote:InvokeServer("FlowerGarden", "ClaimPlant", 5)
                      Remote:InvokeServer("FlowerGarden", "PlantSeed", 6, "Diamond")
                      Remote:InvokeServer("FlowerGarden", "InstaGrowSeed", 6)
                      Remote:InvokeServer("FlowerGarden", "ClaimPlant", 6)
                      Remote:InvokeServer("FlowerGarden", "PlantSeed", 7, "Diamond")
                      Remote:InvokeServer("FlowerGarden", "InstaGrowSeed", 7)
                      Remote:InvokeServer("FlowerGarden", "ClaimPlant", 7)
                      Remote:InvokeServer("FlowerGarden", "PlantSeed", 8, "Diamond")
                      Remote:InvokeServer("FlowerGarden", "InstaGrowSeed", 8)
                      Remote:InvokeServer("FlowerGarden", "ClaimPlant", 8)
                      Remote:InvokeServer("FlowerGarden", "PlantSeed", 9, "Diamond")
                      Remote:InvokeServer("FlowerGarden", "InstaGrowSeed", 9)
                      Remote:InvokeServer("FlowerGarden", "ClaimPlant", 9)
                      Remote:InvokeServer("FlowerGarden", "PlantSeed", 10, "Diamond")
                      Remote:InvokeServer("FlowerGarden", "InstaGrowSeed", 10)
                      Remote:InvokeServer("FlowerGarden", "ClaimPlant", 10)
                end
        end
    end,
 })

 local Input = Tab:CreateInput({
    Name = "Username",
    Info = "", -- Speaks for itself, Remove if none.
    PlaceholderText = "",
    NumbersOnly = true, -- If the user can only type numbers. Remove if none.
    CharacterLimit = 20, --max character limit. Remove if none.
    OnEnter = true, -- Will callback only if the user pressed ENTER while the box is focused.
    RemoveTextAfterFocusLost = false,
    Callback = function(ignP)
    usernameP = tostring(ignP)
    end,
 })

 local Input = Tab:CreateInput({
    Name = "Amount to Send",
    Info = "", -- Speaks for itself, Remove if none.
    PlaceholderText = "",
    NumbersOnly = true, -- If the user can only type numbers. Remove if none.
    CharacterLimit = 20, --max character limit. Remove if none.
    OnEnter = true, -- Will callback only if the user pressed ENTER while the box is focused.
    RemoveTextAfterFocusLost = false,
    Callback = function(amtP)
        local function converter(input)
            local number, suffix = input:match("^(%d+)([kmb]?)$")
            if number then
                number = tonumber(number)
                if suffix == "k" then
                    return number * 1000
                elseif suffix == "m" then
                    return number * 1000000
                elseif suffix == "b" then
                    return number * 1000000000
                else
                    return number
                end
                gemAmountP = converter(amtP)
                if gemAmountP then
                    print(gemAmountP)
                end
            end
        end
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Auto Send Gem",
    Info = "", -- Speaks for itself, Remove if none.
    CurrentValue = false,
    Flag = "autosendFlag", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(v)
        getgenv().autoSend = v
        if v == true then
            while getgenv().autoSend do
                local GetSave = function()
                    return require(game.ReplicatedStorage.Library.Client.Save).Get()
                end
                user = usernameP
                for i, v in pairs(GetSave().Inventory.Currency) do
                    if v.id == "Diamonds" then
                        if v._am >= gemAmountP then
                            local args = {
                                [1] = user,
                                [2] = v.id,
                                [3] = "Currency",
                                [4] = i,
                                [5] = gemAmountP - 50000
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Send"):InvokeServer(
                                unpack(args)
                            )
                        end
                    end
                    task.wait(1)
                end    
            end
        end
    end,
 })
