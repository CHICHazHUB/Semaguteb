function mainPremium()
    getgenv().Config = {}

    repeat
        task.wait()
        local vu = game:GetService("VirtualUser")
        game:GetService("Players").LocalPlayer.Idled:connect(
            function()
                vu:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                wait(1)
                vu:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
            end
        )
    until game:IsLoaded()

    local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/jelqmaster/orionmod/main/bop"))()
    local Window =
        OrionLib:MakeWindow(
        {Name = "PS99 Script [Premium] (Ver. 0.4)", HidePremium = false, SaveConfig = false, ConfigFolder = "OrionTest"}
    )

    local Plant =
    Window:MakeTab(
    {
        Name = "Plant Option",
        Icon = "rbxassetid://4483345998",
        PremiumOnly = false
    }
    )

    local Tab4 =
        Window:MakeTab(
        {
            Name = "Mailing",
            Icon = "rbxassetid://4483345998",
            PremiumOnly = false
        }
    )

    local Merchant =
        Window:MakeTab(
        {
            Name = "Merchant",
            Icon = "rbxassetid://4483345998",
            PremiumOnly = false
        }
    )

    local Misc =
        Window:MakeTab(
        {
            Name = "Misc",
            Icon = "rbxassetid://4483345998",
            PremiumOnly = false
        }
    )

    local Tab5 =
        Window:MakeTab(
        {
            Name = "Auto Mail",
            Icon = "rbxassetid://4483345998",
            PremiumOnly = false
        }
    )

    -- Merchant:AddButton(
    --     {
    --         Name = "Auto Merchant",
    --         Callback = function()
    --             autoMerchant()
    --         end
    --     }
    -- )

    Tab4:AddTextbox(
        {
            Name = "Username",
            Default = "",
            TextDisappear = false,
            Callback = function(ign)
                usernamel = tostring(ign)
            end
        }
    )

    Tab4:AddTextbox(
        {
            Name = "Amount to Send",
            Default = "",
            TextDisappear = false,
            Callback = function(amt)
                local function converter(input)
                    local number, suffix = input:match("^(%d+)([kmb]?)$")
                    if number then
                        number = tonumber(number)
                        if suffix == "k" then
                            return number * 1000
                        elseif suffix == "m" then
                            return number * 1000000
                        elseif suffix == "b" then
                            return number * 1000000000
                        else
                            return number
                        end
                    else
                        OrionLib:MakeNotification(
                            {
                                Name = "Invalid Input!",
                                Content = "Please use valid numbers",
                                Image = "rbxassetid://4483345998",
                                Time = 5
                            }
                        )
                        return nil
                    end
                end

                gemAmount = converter(amt)
                if gemAmount then
                    print(gemAmount)
                else
                    OrionLib:MakeNotification(
                        {
                            Name = "Error!",
                            Content = "Something went wrong.",
                            Image = "rbxassetid://4483345998",
                            Time = 5
                        }
                    )
                end
            end
        }
    )

    Tab4:AddButton(
        {
            Name = "Send Gems!",
            Callback = function()
                sendGems()
            end
        }
    )

    Misc:AddButton(
        {
            Name = "AntiAFK",
            Callback = function()
                antiAFK()
            end
        }
    )

    Misc:AddButton(
        {
            Name = "WhiteScreen On",
            Callback = function()
                turnWhiteScreenOn()
            end
        }
    )

    Misc:AddButton(
        {
            Name = "WhiteScreen OFF",
            Callback = function()
                turnWhiteScreenOff()
            end
        }
    )

    Tab5:AddParagraph(
        "INFO",
        "ใช้ Feature ในนี้เพื่อ AutoSend ใช้เป็นหลัก 1m ขึ้นไปหลังจากฟาร์มได้สักพักแล้ว"
    )

    Tab5:AddTextbox(
        {
            Name = "Username",
            Default = "",
            TextDisappear = false,
            Callback = function(ignP)
                usernameP = tostring(ignP)
            end
        }
    )

    Tab5:AddTextbox(
        {
            Name = "Amount to Send",
            Default = "",
            TextDisappear = false,
            Callback = function(amtP)
                local function converter(input)
                    local number, suffix = input:match("^(%d+)([kmb]?)$")
                    if number then
                        number = tonumber(number)
                        if suffix == "k" then
                            return number * 1000
                        elseif suffix == "m" then
                            return number * 1000000
                        elseif suffix == "b" then
                            return number * 1000000000
                        else
                            return number
                        end
                    else
                        OrionLib:MakeNotification(
                            {
                                Name = "Invalid Input!",
                                Content = "Please use valid numbers",
                                Image = "rbxassetid://4483345998",
                                Time = 5
                            }
                        )
                        return nil
                    end
                end

                gemAmountP = converter(amtP)
                if gemAmountP then
                    print(gemAmountP)
                else
                    OrionLib:MakeNotification(
                        {
                            Name = "Error!",
                            Content = "Something went wrong.",
                            Image = "rbxassetid://4483345998",
                            Time = 5
                        }
                    )
                end
            end
        }
    )

    Tab5:AddToggle(
        {
            Name = "Auto Send",
            Default = false,
            Callback = function(v)
                Config.autoSend = v
                spawn(autoSend)
            end
        }
    )

    Plant:AddParagraph(
        "INFO",
        "rainningPlant คือวาปไปปลูกผักแบบรดน้ำ, instaPlant คือวาปปลูกผักแบบใช้ Capsule"
    )

    Plant:AddToggle(
        {
            Name = "rainningPlant",
            Default = false,
            Callback = function(v)
                getgenv().TpGarden = true
                if getgenv().TpGarden then
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(176.87, 23.35, 1993.71)
                task.wait(1.3)
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-450.63, 110.38, -1399.75)
                return getgenv().TpGarden = false end
                Config.waterPlant = v
                spawn(waterPlant)
            end
        }
    )

    -- Merchant:AddToggle(
    --     {
    --         Name = "Auto Merchant",
    --         Default = false,
    --         Callback = function(v)
    --             Config.autoMerchant = v
    --             spawn(autoMerchant)
    --         end
    --     }
    -- )

    OrionLib:Init()

    function antiAFK()
        local VirtualInputManager = game:GetService("VirtualInputManager")
        while task.wait() do
            VirtualInputManager:SendKeyEvent(true, "Space", false, game)
            task.wait(.2)
            VirtualInputManager:SendKeyEvent(false, "Space", false, game)
            task.wait(300)
        end
    end

    -- function noEggAnimation()
    --     for _, v in pairs(game.Players.LocalPlayer.PlayerScripts.Scripts.Game:GetChildren()) do
    --         if v.Name == "Egg Opening Frontend" then
    --             v:Destroy()
    --         end
    --     end
    -- end

    -- function autoCharm()
    --     while task.wait() and Config.autoCharm do
    --         game:GetService("ReplicatedStorage").Network.MagicMachine_Activate:InvokeServer("Charm Stone")
    --     end
    -- end

    -- function autoHuge()
    --     while task.wait() and Config.autoHuge do
    --         game:GetService("ReplicatedStorage").Network.MagicMachine_Activate:InvokeServer("Huge Potion")
    --     end
    -- end

    local Players = game:GetService("Players")
    local player = Players.LocalPlayer
    local playerGui = player:WaitForChild("PlayerGui")
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Parent = playerGui
    screenGui.Enabled = false
    
    local frame = Instance.new("Frame")
    frame.BackgroundColor3 = Color3.new(1, 1, 1)
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.Parent = screenGui
    
    function turnWhiteScreenOn()
        screenGui.Enabled = true
    end
    
    function turnWhiteScreenOff()
        screenGui.Enabled = false
    end

    function autoMerchant()
        while Config.autoMerchant do
        game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(258.929, 16.557, 2061.457)
        task.wait(0.1)
        local num = 1
        for i = 1,6 do
            for i = 1,6 do
                game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Merchant_RequestPurchase"):InvokeServer("GardenMerchant",num)
        end
        num = num + 1
    end
        end
    end

    local Remote = game.ReplicatedStorage.Network.Instancing_InvokeCustomFromClient
    local saveModule = require(game:GetService("ReplicatedStorage").Library.Client.Save)
    local result = saveModule.Get()
    local Remote = game.ReplicatedStorage.Network.Instancing_InvokeCustomFromClient
    local Lib = require(game.ReplicatedStorage:WaitForChild("Library").Client)
    local Lib_ = require(game.ReplicatedStorage:WaitForChild("Library"))
    local HttpService = game:GetService("HttpService")

    function waterPlant()
        while true do
        if Config.waterPlant then
    local Remote = game.ReplicatedStorage.Network.Instancing_InvokeCustomFromClient
        Remote:InvokeServer("FlowerGarden", "PlantSeed", 1, "Diamond")
        Remote:InvokeServer("FlowerGarden", "WaterSeed", 1)
        Remote:InvokeServer("FlowerGarden", "ClaimPlant", 1)
        Remote:InvokeServer("FlowerGarden", "PlantSeed", 2, "Diamond")
        Remote:InvokeServer("FlowerGarden", "WaterSeed", 2)
        Remote:InvokeServer("FlowerGarden", "ClaimPlant", 2)
        Remote:InvokeServer("FlowerGarden", "PlantSeed", 3, "Diamond")
        Remote:InvokeServer("FlowerGarden", "WaterSeed", 3)
        Remote:InvokeServer("FlowerGarden", "ClaimPlant", 3)
        Remote:InvokeServer("FlowerGarden", "PlantSeed", 4, "Diamond")
        Remote:InvokeServer("FlowerGarden", "WaterSeed", 4)
        Remote:InvokeServer("FlowerGarden", "ClaimPlant", 4)
        Remote:InvokeServer("FlowerGarden", "PlantSeed", 5, "Diamond")
        Remote:InvokeServer("FlowerGarden", "WaterSeed", 5)
        Remote:InvokeServer("FlowerGarden", "ClaimPlant", 5)
        Remote:InvokeServer("FlowerGarden", "PlantSeed", 6, "Diamond")
        Remote:InvokeServer("FlowerGarden", "WaterSeed", 6)
        Remote:InvokeServer("FlowerGarden", "ClaimPlant", 6)
        Remote:InvokeServer("FlowerGarden", "PlantSeed", 7, "Diamond")
        Remote:InvokeServer("FlowerGarden", "WaterSeed", 7)
        Remote:InvokeServer("FlowerGarden", "ClaimPlant", 7)
        Remote:InvokeServer("FlowerGarden", "PlantSeed", 8, "Diamond")
        Remote:InvokeServer("FlowerGarden", "WaterSeed", 8)
        Remote:InvokeServer("FlowerGarden", "ClaimPlant", 8)
        Remote:InvokeServer("FlowerGarden", "PlantSeed", 9, "Diamond")
        Remote:InvokeServer("FlowerGarden", "WaterSeed", 9)
        Remote:InvokeServer("FlowerGarden", "ClaimPlant", 9)
        Remote:InvokeServer("FlowerGarden", "PlantSeed", 10, "Diamond")
        Remote:InvokeServer("FlowerGarden", "WaterSeed", 10)
        Remote:InvokeServer("FlowerGarden", "ClaimPlant", 10)
        end
    end
end

    --     game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
    --         CFrame.new(215.520996, 13.6210003, 168.335007) + Vector3.new(0, 5, 0)
    --     task.wait(0.1)
    --     game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
    --         CFrame.new(427.792023, 13.6090002, 497.579987) + Vector3.new(0, 5, 0)
    --     task.wait(1)
    --     for i = 1, 6 do
    --         local a, b
    --         repeat
    --             task.wait(0.3)
    --             a, b =
    --                 game:GetService("ReplicatedStorage").Network.Merchant_RequestPurchase:InvokeServer(
    --                 "RegularMerchant",
    --                 i
    --             )
    --         until not a
    --     end
    --     task.wait(0.5)
    --     game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
    --         CFrame.new(567.216003, 13.625, 1017.68402) + Vector3.new(0, 5, 0)
    --     task.wait(0.1)
    --     game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
    --         CFrame.new(874.140991, 13.625, 1494.69495) + Vector3.new(0, 5, 0)
    --     task.wait(1)
    --     for i = 1, 6 do
    --         local a, b
    --         repeat
    --             task.wait(0.3)
    --             a, b =
    --                 game:GetService("ReplicatedStorage").Network.Merchant_RequestPurchase:InvokeServer(
    --                 "AdvancedMerchant",
    --                 i
    --             )
    --         until not a
    --     end
    -- end

    -- function sendWebhookMessage(embed)
    --     local syn = syn or {}
    --     local request = syn.request or http_request or request
    --     local success, response = pcall(function()
    --         return request({
    --             Url = webhooklink,
    --             Method = "POST",
    --             Headers = {["Content-Type"] = "application/json"},
    --             Body = HttpService:JSONEncode({
    --                 content = "@everyone",
    --                 embeds = {embed}
    --             })
    --         })
    --     end)
    --     if not success then
    --         warn("Failed to send webhook message:", response)
    --     end
    -- end    
    
    -- function countHugePets()
    --     local Library = require(game.ReplicatedStorage.Library)
    --     local Save = Library.Save.Get().Inventory
    --     local AmountOfHuges = 0
    --     for _, v in pairs(Save.Pet) do
    --         local id = v.id
    --         local dir = Library.Directory.Pets[id]
    --         if dir.huge then
    --             AmountOfHuges = AmountOfHuges + 1
    --         end
    --     end
    --     return AmountOfHuges
    -- end
    
    -- function monitorAndNotifyHugePetIncreases()
    --     local previousAmountOfHuges = countHugePets()
    --     local lp = game.Players.LocalPlayer.Name
    --     while true do
    --         if Config.hugeNotify then
    --             local currentAmountOfHuges = countHugePets()
    --             if currentAmountOfHuges > previousAmountOfHuges then
    --                 local embed = {
    --                     title = "**🌟 HUGE PET ALERT! 🌟**",
    --                     description = lp .. " got a huge!",
    --                     color = 0xEE4B2B,
    --                 }
    --                 sendWebhookMessage(embed)
    --                 previousAmountOfHuges = currentAmountOfHuges
    --             end
    --         end
    --         wait(0.5)
    --     end
    -- end

    -- local saveModule = require(game:GetService("ReplicatedStorage").Library.Client.Save)
    -- local HttpService = game:GetService("HttpService")

    -- function sendWebhookMessage(embed)
    --     local syn = syn or {}
    --     local request = syn.request or http_request or request
    --     local success, response = pcall(function()
    --         return request({
    --             Url = webhooklink,
    --             Method = "POST",
    --             Headers = {["Content-Type"] = "application/json"},
    --             Body = HttpService:JSONEncode({
    --                 content = "@everyone",
    --                 embeds = {embed}
    --             })
    --         })
    --     end)
    --     if not success then
    --         warn("Failed to send webhook message:", response)
    --     end
    -- end    

    -- function countCharmStones()
    --     local result = saveModule.Get()
    --     local cs = result.Inventory.Misc
    --     local charmStoneCount = 0
    --     for i, v in pairs(cs) do
    --         if v.id == "Charm Stone" then
    --             charmStoneCount = charmStoneCount + (v._am or 1)
    --         end
    --     end
    --     return charmStoneCount
    -- end

    -- function monitorAndNotifyCSIncreases()
    --     local previousCharmStoneCount = countCharmStones()
    --     local lp = game.Players.LocalPlayer.Name
    --     local debounce = false
    
    --     while true do
    --         if Config.csNotify and not debounce then
    --             local currentCharmStoneCount = countCharmStones()
    --             if currentCharmStoneCount > previousCharmStoneCount then
    --                 debounce = true
    --                 local embed = {
    --                     title = "Charm Stone!",
    --                     description = lp .. " got a charm stone!",
    --                     color = 0x66FF00,
    --                 }
    --                 sendWebhookMessage(embed)
    --                 previousCharmStoneCount = currentCharmStoneCount
    
    --                 wait(1)
    --                 debounce = false
    --             end
    --         end
    --         wait(0.5)
    --     end
    -- end

    -- local saveModule = require(game:GetService("ReplicatedStorage").Library.Client.Save)
    -- local HttpService = game:GetService("HttpService")

    -- function sendWebhookMessage(embed)
    --     local syn = syn or {}
    --     local lp = game.Players.LocalPlayer.Name
    --     local request = syn.request or http_request or request
    --     local success, response = pcall(function()
    --         return request({
    --             Url = webhooklink,
    --             Method = "POST",
    --             Headers = {["Content-Type"] = "application/json"},
    --             Body = HttpService:JSONEncode({
    --                 content = "@everyone",
    --                 embeds = {embed}
    --             })
    --         })
    --     end)
    --     if not success then
    --         warn("Failed to send webhook message:", response)
    --     end
    -- end    

    -- function countMagicShards()
    --     local result = saveModule.Get()
    --     local ms = result.Inventory.Misc
    --     local magicShardCount = 0
    --     for i, v in pairs(ms) do
    --         if v.id == "Magic Shard" then
    --             magicShardCount = magicShardCount + (v._am or 1)
    --         end
    --     end
    --     return magicShardCount
    -- end

    -- function monitorAndNotifyMSIncreases()
    --     local previousMagicShardCount = countMagicShards()
    --     local lp = game.Players.LocalPlayer.Name
    --     local debounce = false
    
    --     while true do
    --         if Config.msNotify and not debounce then
    --             local currentMagicShardCount = countMagicShards()
    --             if currentMagicShardCount > previousMagicShardCount then
    --                 debounce = true
    --                 local embed = {
    --                     title = "Magic Shard!",
    --                     description = lp .. " got a magic shard!",
    --                     color = 0xA020F0,
    --                 }
    --                 sendWebhookMessage(embed)
    --                 previousMagicShardCount = currentMagicShardCount
    
    --                 wait(1)
    --                 debounce = false
    --             end
    --         end
    --         wait(0.5)
    --     end
    -- end   

    function sendGems()
        local GetSave = function()
            return require(game.ReplicatedStorage.Library.Client.Save).Get()
        end

        for i, v in pairs(GetSave().Inventory.Currency) do
            if v.id == "Diamonds" then
                local adjustedAmount = tonumber(gemAmount)

                if adjustedAmount > v._am then
                    OrionLib:MakeNotification(
                        {
                            Name = "Error!",
                            Content = "You're trying to send more gems than you have.",
                            Image = "rbxassetid://4483345998",
                            Time = 5
                        }
                    )
                else
                    if v._am - adjustedAmount < 10000 then
                        adjustedAmount = math.max(0, adjustedAmount - 10000)
                    end

                    local args = {
                        [1] = usernamel,
                        [2] = v.id,
                        [3] = "Currency",
                        [4] = i,
                        [5] = adjustedAmount
                    }

                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Send"):InvokeServer(
                        unpack(args)
                    )
                    OrionLib:MakeNotification(
                        {
                            Name = "Success!",
                            Content = "You successfully sent " .. adjustedAmount .. " to " .. username,
                            Image = "rbxassetid://4483345998",
                            Time = 5
                        }
                    )
                end
            end
        end
    end

    function autoSend()
        while Config.autoSend do
            local GetSave = function()
                return require(game.ReplicatedStorage.Library.Client.Save).Get()
            end
            user = usernameP
            for i, v in pairs(GetSave().Inventory.Currency) do
                if v.id == "Diamonds" then
                    if v._am >= gemAmountP then
                        local args = {
                            [1] = user,
                            [2] = v.id,
                            [3] = "Currency",
                            [4] = i,
                            [5] = gemAmountP - 10000
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Send"):InvokeServer(
                            unpack(args)
                        )
                    end
                end
                task.wait(1)
            end
        end
    end

    -- function autoFuse()
    --     while task.wait(0.1) and Config.autoFuse do
    --         local saveModule = require(game:GetService("ReplicatedStorage").Library.Client.Save)
    --         local result = saveModule.Get()

    --         local EquippedPet = result.EquippedPets

    --         for _, pet in pairs(EquippedPet) do
    --             local uid = pet.uid
    --             if uid then
    --                 local args = {
    --                     [1] = {
    --                         [uid] = 3
    --                     }
    --                 }

    --                 game:GetService("ReplicatedStorage").Network.FuseMachine_Activate:InvokeServer(unpack(args))
    --             end
    --         end
    --     end
    -- end

    -- function autoZone()
    --     local mapNames = {
    --         "Colorful Forest",
    --         "Castle",
    --         "Green Forest",
    --         "Autumn",
    --         "Cherry Blossom",
    --         "Farm",
    --         "Backyard",
    --         "Misty Falls",
    --         "Mine",
    --         "Crystal Caverns",
    --         "Dead Forest",
    --         "Dark Forest",
    --         "Mushroom Field",
    --         "Enchanted Forest",
    --         "Crimson Forest",
    --         "Jungle",
    --         "Jungle Temple",
    --         "Oasis",
    --         "Beach",
    --         "Coral Reef",
    --         "Shipwreck",
    --         "Atlantis",
    --         "Palm Beach",
    --         "Tiki",
    --         "Pirate Cove",
    --         "Pirate Tavern",
    --         "Shanty Town",
    --         "Desert Village",
    --         "Fossil Digsite",
    --         "Desert Pyramids",
    --         "Red Desert",
    --         "Wild West",
    --         "Grand Canyons",
    --         "Safari",
    --         "Mountains",
    --         "Snow Village",
    --         "Icy Peaks",
    --         "Ice Rink",
    --         "Ski Town",
    --         "Hot Springs",
    --         "Fire and Ice",
    --         "Volcano",
    --         "Obsidian Cave",
    --         "Lava Forest",
    --         "Underworld",
    --         "Underworld Bridge",
    --         "Underworld Castle",
    --         "Metal Dojo",
    --         "Fire Dojo",
    --         "Samurai Village",
    --         "Bamboo Forest",
    --         "Zen Garden",
    --         "Flower Field",
    --         "Fairytale Meadows",
    --         "Fairytale Castle",
    --         "Royal Kingdom",
    --         "Fairy Castle",
    --         "Cozy Village",
    --         "Rainbow River",
    --         "Colorful Mines",
    --         "Colorful Mountains",
    --         "Frost Mountains",
    --         "Ice Sculptures",
    --         "Snowman Town",
    --         "Ice Castle",
    --         "Polar Express",
    --         "Firefly Cold Forest",
    --         "Golden Road",
    --         "No Path Forest",
    --         "Ancient Ruins",
    --         "Runic Altar",
    --         "Wizard Tower",
    --         "Witch Marsh",
    --         "Haunted Forest",
    --         "Haunted Graveyard",
    --         "Haunted Mansion",
    --         "Dungeon Entrance",
    --         "Dungeon",
    --         "Treasure Dungeon",
    --         "Empyrean Dungeon",
    --         "Mythic Dungeon",
    --         "Cotton Candy Forest",
    --         "Gummy Forest",
    --         "Chocolate Waterfall",
    --         "Sweets",
    --         "Toys and Blocks",
    --         "Carnival",
    --         "Theme Park",
    --         "Clouds",
    --         "Cloud Garden",
    --         "Cloud Forest"
    --     }

    --     local function generateZones()
    --         local zones = {}
    --         for i = 2, #mapNames + 1 do
    --             local currentZoneName = mapNames[i - 1]
    --             local prevZoneName = i > 2 and mapNames[i - 2] or "1 | Spawn"

    --             table.insert(
    --                 zones,
    --                 {
    --                     name = currentZoneName,
    --                     gate = tostring(i) .. " | " .. currentZoneName,
    --                     prevZone = tostring(i - 1) .. " | " .. prevZoneName
    --                 }
    --             )
    --         end
    --         return zones
    --     end

    --     local zones = generateZones()

    --     while Config.autoZone do
    --         for _, zone in ipairs(zones) do
    --             local gateTransparency = game.Workspace.Map[zone.gate].INTERACT.Gate.Transparency
    --             if gateTransparency == 0 then
    --                 repeat
    --                     task.wait()
    --                     gateTransparency = game.Workspace.Map[zone.gate].INTERACT.Gate.Transparency
    --                     local prevZoneCFrame = game.Workspace.Map[zone.prevZone].INTERACT.BREAK_ZONES.BREAK_ZONE.CFrame

    --                     if zone.name == "Green Forest" then
    --                         for i = 1, 3 do
    --                             game:GetService("ReplicatedStorage").Network.EquipSlotsMachine_RequestPurchase:InvokeServer(
    --                                 i
    --                             )
    --                         end
    --                     end

    --                     game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
    --                         prevZoneCFrame + Vector3.new(0, 5, 0)
    --                     game:GetService("ReplicatedStorage").Network.Zones_RequestPurchase:InvokeServer(zone.name)
    --                 until gateTransparency == 1 or not Config.autoZone
    --             end
    --             if not Config.autoZone then
    --                 break
    --             end
    --         end
    --         task.wait()
    --     end
    -- end
-- local function destroyNearbyObjects(targetCFrame, mapLocation)
--     local threshold = 1

--     while true do
--         local success, mapLocationObject = pcall(function()
--             return game.Workspace.Map[mapLocation]
--         end)

--         if success and mapLocationObject and mapLocationObject:FindFirstChild("INTERACT") then
--             local interactObject = mapLocationObject.INTERACT
--             if interactObject:FindFirstChild("BREAK_ZONES") then
--                 local breakZones = interactObject.BREAK_ZONES
--                 for _, v in pairs(breakZones:GetChildren()) do
--                     if v:IsA("BasePart") then
--                         local distance = (v.CFrame.Position - targetCFrame.Position).Magnitude
--                         if distance <= threshold then
--                             v:Destroy()
--                         end
--                     end
--                 end
--             end
--         end

--         wait(0.1)
--     end
-- end

-- spawn(function()
--     destroyNearbyObjects(CFrame.new(124.629379, 13.3689919, 576.299683), "20 | Beach")
-- end)
-- spawn(function()
--     destroyNearbyObjects(CFrame.new(1489.37939, 13.4520512, 1760.04968), "46 | Underworld")
-- end)
-- spawn(function()
--     destroyNearbyObjects(CFrame.new(574.262878, 13.4520512, 3284.75342), "70 | No Path Forest")
-- end)
-- spawn(function()
--     destroyNearbyObjects(CFrame.new(214.122131, 24.4171562, -587.119263), "1 | Spawn")
-- end)

-- function autoFlag()
--     local saveModule = require(game:GetService("ReplicatedStorage").Library.Client.Save)
--     local result = saveModule.Get()
--     local Flags = result.Inventory.Misc
--     local flaguid
    
--     for i, v in pairs(Flags) do
--         if v.id == selectedFlag then
--             flaguid = i
--             break
--         end
--     end
    
--     local shit = {}
    
--     for _, v in pairs(game.Workspace.Map:GetChildren()) do
--         if v.Name ~= "SHOP" then
--             table.insert(shit, v.Name)
--         end
--     end
    
--     local function extractNumber(str)
--         local num = str:match("%d+")
--         return tonumber(num) or 0
--     end
    
--     table.sort(shit, function(a, b)
--         return extractNumber(a) < extractNumber(b)
--     end)
    
--     for _, zoneName in ipairs(shit) do
--         for _, v in pairs(game.Workspace.Map:GetDescendants()) do
--             if v.Name == "BREAK_ZONE" and v.Parent.Parent.Parent.Name == zoneName then
--                 game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame + Vector3.new(0, 5, 0)
--                 task.wait(0.1)
--                 for i = 1, 24 do
--                 game:GetService("ReplicatedStorage").Network:FindFirstChild("Flags: Consume"):InvokeServer(selectedFlag, flaguid)            
--                 end
--             end
--         end
    
--         if extractNumber(zoneName) == selectedStop then
--             break
--         end
--     end
-- end

-- function autoIndex()
--     for _, v in pairs(game.Players.LocalPlayer.PlayerScripts.Scripts.Game:GetChildren()) do
--         if v.Name == "Egg Opening Frontend" then
--             v:Destroy()
--         end
--     end

--     getgenv().startEggNumber = selectedStart
--     getgenv().maxEggNumber = selectedMax
--     local eggAmount = selectedAmount
--     local openingsPerEgg = eggTimes
    
--     local function getEggCentersAndNames()
--         local eggCenters = {}
--         local eggNames = {}
    
--         for _, v in pairs(game.Workspace.__THINGS.Eggs.Main:GetDescendants()) do
--             if v.Name == "Center" then
--                 local numStr = v.Parent.Name:match("(%d+)")
--                 if numStr then
--                     local num = tonumber(numStr)
--                     eggCenters[num] = v
--                 end
--             end
--         end
    
    --     for _, v in pairs(game.ReplicatedStorage.__DIRECTORY.Eggs["Zone Eggs"]:GetDescendants()) do
    --         if v:IsA("ModuleScript") then
    --             local nameStr = v.Name:match("(%d+) | (.+)")
    --             if nameStr then
    --                 local num, name = v.Name:match("(%d+) | (.+)")
    --                 if num and name then
    --                     num = tonumber(num)
    --                     eggNames[num] = name
    --                 end
    --             end
    --         end
    --     end
    
    --     return eggCenters, eggNames
    -- end
    
    -- local function handleEgg(eggNumber, openings, eggCenters, eggNames)
    --     local center = eggCenters[eggNumber]
    --     local name = eggNames[eggNumber]
    
    --     if center and name then
    --         for i = 1, openings do
    --             if not Config.autoIndex then return end
    --             game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = center.CFrame
    --             task.wait(0.5)
    --             local args = {
    --                 [1] = name,
    --                 [2] = eggAmount
    --             }
    --             game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Eggs_RequestPurchase"):InvokeServer(unpack(args))
    --             wait(2)
    --         end
    --     else
    --         print("Error occurred.")
    --     end
    -- end
    
--     while true do
--         if Config.autoIndex then
--             local eggCenters, eggNames = getEggCentersAndNames()
--             local currentEggNumber = getgenv().startEggNumber
    
--             while currentEggNumber <= getgenv().maxEggNumber and Config.autoIndex do
--                 handleEgg(currentEggNumber, openingsPerEgg, eggCenters, eggNames)
--                 currentEggNumber = currentEggNumber + 1
--                 wait()
--             end
--         else
--         end
--         wait(1)
--     end
-- end

-- function boothSniper()
--     while task.wait() and Config.boothSniper do
--         local Players = game:GetService("Players")
--         local LocalPlayer = Players.LocalPlayer

--         if not LocalPlayer then return end

--         for _, player in ipairs(Players:GetPlayers()) do
--             if player ~= LocalPlayer then
--                 local userId = player.UserId

--                 local things = game.Workspace:FindFirstChild("__THINGS")
--                 if not things then return end

--                 local booths = things:FindFirstChild("Booths")
--                 if not booths then return end

--                 for _, v in pairs(booths:GetDescendants()) do
--                     if v:IsA("Frame") and v.Parent and v.Parent.Name == "PetScroll" then
--                         local buy = v:FindFirstChild("Buy")
--                         if buy then
--                             local cost = buy:FindFirstChild("Cost")
--                             if cost and cost.Text == "1" then
--                                 local args = {
--                                     [1] = userId,
--                                     [2] = v.Name
--                                 }

--                                 local networkService = game:GetService("ReplicatedStorage"):FindFirstChild("Network")
--                                 if not networkService then return end

--                                 local boothsRequestPurchase = networkService:FindFirstChild("Booths_RequestPurchase")
--                                 if not boothsRequestPurchase then return end

--                                 boothsRequestPurchase:InvokeServer(unpack(args))
--                             end
--                         end
--                     end
--                 end
--             end
--         end
--     end
-- end
end

mainPremium()
